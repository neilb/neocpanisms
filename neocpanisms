#!/usr/local/bin/perl
use strict;
use warnings;
use CPAN::ReleaseHistory 0.03;
use DateTime;
use Template;
use 5.010;

my $template           = Template->new({ INCLUDE_PATH => 'templates' });
my $FIRST_RELEASE_TIME = 801459900;
my $DAY_IN_SECONDS     = 24 * 60 * 60;
my %bins = (
    week  => [],
    month => [],
);
my %counts;

build_bins();
process_cpan_releases();
find_chains();

sub build_bins
{
    my $time = time();
    my ($week_number, $week_year);
    my ($previous_date, $previous_ym, $previous_week);
    my ($date, $ym, $week);

    while ($time > $FIRST_RELEASE_TIME) {
        my ($ym, $week, $date) = time_to_bins($time);

        push(@{ $bins{week} },  $week)  if !defined($previous_week) || $previous_week ne $week;
        push(@{ $bins{month} }, $ym)    if !defined($previous_ym)   || $previous_ym ne $ym;

        $previous_ym   = $ym;
        $previous_week = $week;
        $previous_date = $date;
        $time -= $DAY_IN_SECONDS;
    }
}

sub time_to_bins
{
    my $time        = shift;
    my @ts          = gmtime($time);
    my $year        = $ts[5] + 1900;
    my $month       = $ts[4] + 1;
    my $day         = $ts[3];
    my $date        = sprintf('%.4d-%.2d-%.2d', $year, $month, $day);
    my $ym          = sprintf('%.4d-%.2d', $year, $month);
    my $dt          = DateTime->from_epoch(epoch => $time);
    my $week_number = $dt->strftime('%U');
    my $week_year   = $year;

    if ($week_number == 0) {
        $week_year--;
        $week_number = final_week_number($week_year);
    }
    my $week = sprintf("%.4d-W%.2d", $week_year, $week_number);

    return ($ym, $week, $date);
}

sub final_week_number
{
    my $year = shift;
    state %final_week_number;

    if (not exists $final_week_number{$year}) {
        my $dt = DateTime->new(year => $year, month => 12, day => 31, hour => 12, minute => 0, second => 0);
        $final_week_number{$year} = $dt->strftime('%U');
    }

    return $final_week_number{$year};
}

sub process_cpan_releases
{
    my $iterator = CPAN::ReleaseHistory->new()->release_iterator(well_formed => 1);
    my %seen;

    while (my $release = $iterator->next_release) {
        my $user               = $release->distinfo->cpanid;

        next if exists($seen{$release->distinfo->dist});
        $seen{$release->distinfo->dist} = 1;

        my ($ym, $week, $date) = time_to_bins($release->timestamp);

        $counts{month}->{$user}->{$ym}++;
        $counts{week}->{$user}->{$week}++;
    }

}

sub find_chains
{
    my $data;
    my @lists;

    # active chains
    foreach my $category (qw(month week)) {
        my %chain;
        my %score;
        my @entries;

        USER:
        foreach my $user (keys %{ $counts{$category} }) {
            $data = $counts{$category}->{$user};
            BIN:
            foreach my $bin (@{ $bins{$category} }) {
                if (!exists($data->{$bin})) {

                    # if this is the current time slot,
                    # then don't break the chain if they haven't released yet
                    next BIN if $bin eq $bins{$category}->[0];

                    next USER;
                }
                $chain{$user}++;
                $score{$user} += $data->{$bin};
            }
        }
        @entries = map { { user => $_, count => $chain{$_} } }
                   grep { $chain{$_} >= 2 }
                   sort { $chain{$b} <=> $chain{$a} || $score{$b} <=> $score{$a} }
                   keys %chain;
        push(@lists, { title => "neocpanism a $category", entries => \@entries });
    }

    # all-time chains
    foreach my $category (qw(month week)) {
        my %chain;
        my %score;
        my @entries;

        USER:
        foreach my $user (keys %{ $counts{$category} }) {
            $data = $counts{$category}->{$user};
            my $length = 0;
            my $score  = 0;
            BIN:
            foreach my $bin (@{ $bins{$category} }) {
                if (!exists($data->{$bin})) {
                    if (!exists($chain{$user}) || $length > $chain{$user}) {
                        $chain{$user} = $length;
                        $score{$user} = $score;
                    }
                    $length = 0;
                    $score  = 0;
                    next BIN;
                }
                $length++;
                $score += $data->{$bin};
            }
        }
        @entries = map { { user => $_, count => $chain{$_} } }
                   grep { $chain{$_} >= 2 }
                   sort { $chain{$b} <=> $chain{$a} || $score{$b} <=> $score{$a} }
                   keys %chain;
        push(@lists, { title => "neocpanism a $category", entries => \@entries });
    }


    $template->process('top10-page.html', { lists => \@lists, limit => 100 }, 'index.html');
}

